@startuml scale=2.5
skinparam defaultFontName "Arial"
skinparam defaultFontSize 25

skinparam classAttributeFontSize 16
skinparam classFontSize 16

skinparam class {
    BackgroundColor<<tipo>> #aed6f1
    BorderColor Black
    FontSize 12
}
<style>
	legend {
		FontSize 21
		FontName Arial
		FontColor black
	}
    arrow {
        LineStyle 4
        LineThickness 0.5
        LineColor green
	}
</style>

class "Pruebas de software" 

class "Pruebas Unitarias" <<tipo>> {
    - Caja blanca (estructura interna)
    - Caja negra (funcionalidad)
}
class "Pruebas de Integración" <<tipo>> {
    - Incremental (Top-Down, Bottom-Up, Combinadas)
    - No incremental (Big-Bang)
}
class "Pruebas del Sistema" <<tipo>> {
    - Funcionales
    - Comunicaciones
    - Rendimiento
    - Volumen
    - Sobrecarga
    - Disponibilidad de datos
    - Facilidad de uso
    - Operación
    - Entorno
    - Seguridad
}
class "Pruebas de Implantación" <<tipo>> {
    - Seguridad
    - Rendimiento
    - Operación
    - Copias de seguridad y recuperación
}
class "Pruebas de Aceptación" <<tipo>> {
    - Pruebas ALFA
    - Pruebas BETA
}
class "Pruebas de Regresión" <<tipo>> {
    - Eliminar efecto onda
}
class "Otros tipos de pruebas" <<tipo>> {
    - Pruebas de humo
    - Fuzzing testing
    - Usabilidad
}


"Pruebas de software" -- "Pruebas Unitarias"
"Pruebas de software" -- "Pruebas de Integración"
"Pruebas de software" -- "Pruebas del Sistema"
"Pruebas de software" -- "Pruebas de Implantación"
"Pruebas de software" -- "Pruebas de Aceptación"
"Pruebas de software" -- "Pruebas de Regresión"
"Pruebas de software" -- "Otros tipos de pruebas"

legend left
Pruebas unitarias: Verifican cada componente individualmente.
Pruebas de integración: Verifican el ensamblaje e interacción entre componentes.
Pruebas del sistema: Evalúan el sistema globalmente frente a los requisitos.
Pruebas de implantación: Comprueban el funcionamiento en el entorno real.
Pruebas de aceptación: Validan que el sistema cumple las necesidades del usuario final (ALFA: en la organización desarrolladora; BETA: en el cliente).
Pruebas de regresión: Aseguran que los cambios no introducen errores en componentes no modificados.
Otros tipos: Humo (verificación básica), fuzzing (datos aleatorios), usabilidad (experiencia de usuario).
endlegend
@enduml

@startuml
skinparam defaultFontName "Arial"
skinparam defaultFontSize 18
skinparam classFontSize 18

package "Pruebas unitarias" {
  class "Mockito\n(Java)" as Mockito
  class "xUnit\n(.NET)" as xUnit
  class "TestNG\n(Java)" as TestNG
  class "QUnit\n(JavaScript)" as QUnit
  class "Jasmine\n(JavaScript)" as Jasmine
}

package "Pruebas web" {
  class "Selenium\n(Web)" as Selenium
  class "Cypress\n(Web)" as Cypress
  class "Badboy\n(Web)" as Badboy
}

package "Pruebas de rendimiento" {
  class "JMeter\n(Java/Web)" as JMeter
}

package "Pruebas de servicios web" {
  class "SoapUI\n(SOAP/REST)" as SoapUI
  class "Postman\n(REST)" as Postman
}

package "Pruebas móviles" {
  class "Appium\n(Móvil)" as Appium
}

package "Pruebas de aceptación" {
  class "FitNesse\n(Aceptación)" as FitNesse
}

' Si quieres mostrar relaciones, puedes conectar los paquetes a un nodo central:
class "Herramientas de pruebas de software"
"Herramientas de pruebas de software" -- Mockito
"Herramientas de pruebas de software" -- xUnit
"Herramientas de pruebas de software" -- TestNG
"Herramientas de pruebas de software" -- QUnit
"Herramientas de pruebas de software" -- Jasmine
"Herramientas de pruebas de software" -- Selenium
"Herramientas de pruebas de software" -- Cypress
"Herramientas de pruebas de software" -- Badboy
"Herramientas de pruebas de software" -- JMeter
"Herramientas de pruebas de software" -- SoapUI
"Herramientas de pruebas de software" -- Postman
"Herramientas de pruebas de software" -- Appium
"Herramientas de pruebas de software" -- FitNesse

@enduml

@startuml
skinparam defaultFontName "Arial"
skinparam defaultFontSize 18
skinparam classFontSize 18

together {
package "Pruebas unitarias" {
  class "Mockito\n(Java)"
  class "xUnit\n(NET)"
  class "TestNG\n(Java)"
  class "QUnit\n(JavaScript)"
  class "Jasmine\n(JavaScript)"
}
package "Pruebas web" {
  class "Selenium\n(Web)"
  class "Cypress\n(Web)"
  class "Badboy\n(Web)"
}
package "Pruebas de rendimiento" {
  class "JMeter\n(Java/Web)"
}
package "Pruebas de servicios web" {
  class "SoapUI\n(SOAP/REST)"
  class "Postman\n(REST)"
}
package "Pruebas móviles" {
  class "Appium\n(Móvil)"
}
package "Pruebas de aceptación" {
  class "FitNesse\n(Aceptación)"
}
}

@enduml

@startmindmap
* Herramientas de pruebas de software
** Pruebas unitarias
*** Mockito :: Java, mocking y pruebas unitarias
*** xUnit :: .NET, framework de pruebas unitarias
*** TestNG :: Java, inspirado en JUnit/NUnit
*** QUnit :: JavaScript, pruebas unitarias
*** Jasmine :: JavaScript, framework de pruebas unitarias
** Pruebas web
*** Selenium :: Automatización de pruebas para aplicaciones web
*** Cypress :: Pruebas automáticas para aplicaciones web modernas
*** Badboy :: Captura y reproducción de navegación web
** Pruebas de rendimiento
*** JMeter :: Java/web, pruebas de carga y rendimiento
** Pruebas de servicios web
*** SoapUI :: Pruebas para servicios SOAP y REST en Java
*** Postman :: Pruebas y automatización de servicios RESTful
** Pruebas móviles
*** Appium :: Automatización de pruebas para apps móviles (iOS/Android)
** Pruebas de aceptación
*** FitNesse :: Pruebas de aceptación, integración y documentación ejecutable
@endmindmap