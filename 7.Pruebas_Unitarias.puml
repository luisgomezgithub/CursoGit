@startuml scale=2.5
skinparam defaultFontName "Arial"
skinparam defaultFontSize 25

skinparam classAttributeFontSize 16
skinparam classFontSize 16

skinparam legendBackgroundColor #FFFACD  
skinparam legendBorderColor none 

skinparam class {
    BackgroundColor<<tipo>> #aed6f1
    BorderColor Black
    FontSize 12
}
<style>
	legend {
		FontSize 21
		FontName Arial
		FontColor black
	}
    arrow {
        LineStyle 4
        LineThickness 0.5
        LineColor green
	}
</style>

class "Pruebas de software" 

class "Pruebas Unitarias" <<tipo>> {
    - Caja blanca \n(verifica estructura interna)
    - Caja negra (funcionalidad)
}
class "Pruebas de Integración" <<tipo>> {
  --
  Enfoques
    - Incremental (Top-Down, Bottom-Up, Combinadas)
    - No incremental (Big-Bang)
}

class "Pruebas del Sistema" <<tipo>> {
    - Funcionales
    - Comunicaciones
    - **Rendimiento**
    - **Volumen**
    - **Sobrecarga**
    - Disponibilidad de datos
    - Facilidad de uso
    - Operación
    - Entorno
    - Seguridad
}
class "Pruebas de Implantación" <<tipo>> {
    - Seguridad
    - Rendimiento
    - Operación
    - Copias de seguridad y recuperación
}
class "Pruebas de Aceptación" <<tipo>> {
    - Pruebas ALFA
    - Pruebas BETA
}
class "Pruebas de Regresión" <<tipo>> {
    - Eliminar efecto onda
}
class "Otros tipos de pruebas" <<tipo>> {
    - Pruebas de humo
    - Fuzzing testing
    - Usabilidad
}


"Pruebas de software" -- "Pruebas Unitarias"
"Pruebas de software" -- "Pruebas de Integración"
"Pruebas de software" -- "Pruebas del Sistema"
"Pruebas de software" -- "Pruebas de Implantación"
"Pruebas de software" -- "Pruebas de Aceptación"
"Pruebas de software" -- "Pruebas de Regresión"
"Pruebas de software" -- "Otros tipos de pruebas"

legend left
Pruebas unitarias: Verifican cada componente individualmente.

Pruebas de integración: Verifican el <color DarkBLue><i>**ensamblaje**</i></color> e interacción entre componentes. Comprobar que interactúan correctamente a través de sus interfaces.

**Tipos de pruebas de integración:**

- **Incremental:** Se integran los módulos poco a poco y se prueba tras cada integración.
  - *Top-Down:* De arriba hacia abajo, comenzando por los módulos superiores (más cercanos al usuario)
  - *Bottom-Up:* De abajo (más cercanos a la base de la arquitectura) hacia arriba, comenzando por los módulos básicos.
  - *Combinadas/Sándwich:* Se combinan ambos enfoques.
  
  Ventajas: Permiten identificar errores de integración de manera localizada y progresiva, facilitando la depuración.

- **No incremental (Big Bang):** Se integran y prueban todos los módulos a la vez. Si hay errores, es más difícil localizar su origen.

  Desventajas: Si se detectan errores, es difícil identificar en qué módulo o interacción específica se encuentra el problema, lo que complica la depuración y puede retrasar el desarrollo

<color darkblue>**Pruebas del sistema**: Evalúan el sistema <color Red>**globalmente**</color> frente a los requisitos.
Pruebas de implantación: Comprueban el funcionamiento en el entorno real.

<color Orange>**Pruebas de aceptación**:</color> Validan que el sistema cumple las necesidades del usuario final (ALFA: en la organización desarrolladora; **BETA**: en el cliente).
Pruebas de regresión: Aseguran que los cambios no introducen errores en componentes no modificados.

Otros tipos: Humo (verificación básica), fuzzing (datos aleatorios), usabilidad (experiencia de usuario).

endlegend
@enduml

@startuml
skinparam classAttributeIconSize 0
skinparam classFontSize 15
skinparam classBackgroundColor #F8F8FF
skinparam classBorderColor #7D7D7D
skinparam defaultFontName "Arial"

class PruebasUnitarias {
  +Mockito()
  +xUnit()
  +TestNG()
  +QUnit()
  +Jasmine()
}

class PruebasWeb {
  +Selenium()
  +Cypress()
  +Badboy()
}

class PruebasRendimiento {
  +JMeter()
}

class PruebasServiciosWeb {
  +SoapUI()
  +Postman()
}

class PruebasMoviles {
  +Appium()
}

class PruebasAceptacion {
  +FitNesse()
  +EasyAccept()
}

class AccesoBaseDatos {
  +Cucumber()
}

' Opcional: Relacionar todas con una clase general
class HerramientaPruebas

PruebasUnitarias -- HerramientaPruebas
PruebasWeb -- HerramientaPruebas
PruebasRendimiento -- HerramientaPruebas
PruebasServiciosWeb -- HerramientaPruebas
PruebasMoviles -- HerramientaPruebas
PruebasAceptacion -- HerramientaPruebas
AccesoBaseDatos -- HerramientaPruebas

legend bottom
Badboy se usa para capturar la navegación del usuario. Usado con JMeter.
endlegend
@enduml


@startuml
skinparam classAttributeIconSize 0
skinparam classFontSize 16
skinparam classBackgroundColor #F8F8FF
skinparam classBorderColor #7D7D7D
skinparam defaultFontName "Arial"

skinparam legendBackgroundColor #FFFACD  
skinparam legendBorderColor none 

class CajaBlanca #Bisque {
  +deInterfaz()
  +deEstructurasDeDatosLocales()
  +deBuclesOCondicionesLimite()
  +delCaminoBasico()
  --
  -coberturaDeSentencias()
  -coberturaDeDecisiones()
}

class CajaNegra {
  +particionesDeEquivalencia()
  +analisisDeValoresLimite()
  +valoresDeErrorOImposibles()
  +tablaDeDecision()
  +transicionDeEstado()
  +casoDeUso()
  +grafoCausaEfecto()
  +pruebasDeComparacion()
}

CajaBlanca -- PruebaUnitaria
CajaNegra -- PruebaUnitaria

class PruebaUnitaria

legend bottom
**Caja blanca:** El evaluador conoce el código y verifica la lógica interna.
**Caja negra:** El evaluador no conoce el código, prueba entradas y salidas según requisitos.
endlegend
@enduml



